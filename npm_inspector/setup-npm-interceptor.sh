#!/bin/bash
# setup-npm-interceptor.sh - Script de configura√ß√£o autom√°tica

set -e

# Cores
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
INTERCEPTOR_SCRIPT="$SCRIPT_DIR/npm-smart-interceptor.sh"

echo -e "${BLUE}üöÄ Configurando NPM Smart Interceptor${NC}"

# 1. Verificar se o script principal existe
if [[ ! -f "$INTERCEPTOR_SCRIPT" ]]; then
    echo -e "${RED}‚ùå Script npm-smart-interceptor.sh n√£o encontrado!${NC}"
    exit 1
fi

# 2. Tornar execut√°vel
chmod +x "$INTERCEPTOR_SCRIPT"
echo -e "${GREEN}‚úÖ Script tornou-se execut√°vel${NC}"

# 3. Instalar depend√™ncias do sistema
echo -e "${BLUE}üì¶ Verificando depend√™ncias...${NC}"

install_deps() {
    if command -v apt &> /dev/null; then
        # Ubuntu/Debian
        echo -e "${BLUE}üì¶ Instalando depend√™ncias no Ubuntu/Debian...${NC}"
        sudo apt update && sudo apt install -y jq curl
    elif command -v brew &> /dev/null; then
        # macOS
        echo -e "${BLUE}üì¶ Instalando depend√™ncias no macOS...${NC}"
        brew install jq curl
    elif command -v yum &> /dev/null; then
        # CentOS/RHEL
        echo -e "${BLUE}üì¶ Instalando depend√™ncias no CentOS/RHEL...${NC}"
        sudo yum install -y jq curl
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Sistema n√£o reconhecido. Instale manualmente: jq, curl${NC}"
        exit 1
    fi
}

# Verificar se jq e curl est√£o instalados
if ! command -v jq &> /dev/null || ! command -v curl &> /dev/null; then
    echo -e "${YELLOW}‚ö†Ô∏è  Depend√™ncias faltando. Instalando...${NC}"
    install_deps
fi

echo -e "${GREEN}‚úÖ Depend√™ncias verificadas${NC}"

# 4. Configurar alias autom√°tico
setup_alias() {
    local shell_config=""
    local shell_name=$(basename "$SHELL")
    
    case $shell_name in
        "bash")
            shell_config="$HOME/.bashrc"
            ;;
        "zsh")
            shell_config="$HOME/.zshrc"
            ;;
        "fish")
            shell_config="$HOME/.config/fish/config.fish"
            echo -e "${YELLOW}‚ö†Ô∏è  Fish shell detectado. Configura√ß√£o manual necess√°ria${NC}"
            return
            ;;
        *)
            echo -e "${YELLOW}‚ö†Ô∏è  Shell n√£o reconhecido: $shell_name${NC}"
            return
            ;;
    esac
    
    if [[ -n "$shell_config" ]]; then
        echo -e "${BLUE}üîß Configurando alias no $shell_config...${NC}"
        
        # Backup do arquivo de configura√ß√£o
        cp "$shell_config" "$shell_config.backup.$(date +%Y%m%d_%H%M%S)"
        
        # Adicionar alias se n√£o existir
        if ! grep -q "npm-smart-interceptor" "$shell_config" 2>/dev/null; then
            echo "" >> "$shell_config"
            echo "# NPM Smart Interceptor - Auto-generated" >> "$shell_config"
            echo "alias npm='$INTERCEPTOR_SCRIPT'" >> "$shell_config"
            echo "# Fun√ß√£o para desabilitar temporariamente o interceptor" >> "$shell_config"
            echo "npm-direct() { command npm \"\$@\"; }" >> "$shell_config"
            
            echo -e "${GREEN}‚úÖ Alias configurado em $shell_config${NC}"
            echo -e "${YELLOW}üí° Execute 'source $shell_config' ou reinicie o terminal${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Alias j√° configurado em $shell_config${NC}"
        fi
    fi
}

# 5. Perguntar sobre configura√ß√£o da IA
setup_ai() {
    echo -e "\n${BLUE}ü§ñ Configura√ß√£o da An√°lise com IA${NC}"
    echo -e "${YELLOW}A an√°lise com IA oferece detec√ß√£o avan√ßada de c√≥digo malicioso${NC}"
    echo -e "${YELLOW}Requer uma API key da OpenAI (paga, mas uso m√≠nimo)${NC}"
    
    read -p "Deseja habilitar an√°lise com IA? (y/N): " enable_ai
    
    if [[ "$enable_ai" == "y" || "$enable_ai" == "Y" ]]; then
        read -p "Digite sua OpenAI API key: " api_key
        
        if [[ -n "$api_key" ]]; then
            # Adicionar ao shell config
            local shell_config=""
            case $(basename "$SHELL") in
                "bash") shell_config="$HOME/.bashrc" ;;
                "zsh") shell_config="$HOME/.zshrc" ;;
            esac
            
            if [[ -n "$shell_config" ]]; then
                echo "export OPENAI_API_KEY='$api_key'" >> "$shell_config"
                echo "export NPM_AI_ANALYSIS=true" >> "$shell_config"
                echo -e "${GREEN}‚úÖ IA configurada${NC}"
            else
                echo -e "${YELLOW}üí° Adicione manualmente ao seu .bashrc/.zshrc:${NC}"
                echo "export OPENAI_API_KEY='$api_key'"
                echo "export NPM_AI_ANALYSIS=true"
            fi
        else
            echo -e "${YELLOW}‚ö†Ô∏è  API key n√£o fornecida. IA ser√° desabilitada${NC}"
        fi
    else
        echo -e "${BLUE}‚ÑπÔ∏è  IA desabilitada. Usando apenas detec√ß√£o por padr√µes${NC}"
    fi
}

# 6. Criar script de teste
create_test_script() {
    local test_script="$SCRIPT_DIR/test-interceptor.sh"
    
    cat > "$test_script" << 'EOF'
#!/bin/bash
# test-interceptor.sh - Script de teste do interceptor

echo "üß™ Testando NPM Smart Interceptor..."

# Teste 1: Verificar se alias est√° funcionando
echo "Teste 1: Verificando configura√ß√£o do alias..."
if alias npm | grep -q "npm-smart-interceptor"; then
    echo "‚úÖ Alias configurado corretamente"
else
    echo "‚ùå Alias n√£o encontrado"
fi

# Teste 2: Testar comando que n√£o instala
echo "Teste 2: Executando 'npm --version'..."
npm --version

# Teste 3: Simular instala√ß√£o (dry-run n√£o dispon√≠vel para npm install)
echo "Teste 3: Testando verifica√ß√£o de pacotes comprometidos..."
echo "Executando verifica√ß√£o manual..."

# Verificar se algum pacote comprometido est√° instalado
npm ls ansi-styles@6.2.2 debug@4.4.2 chalk@5.6.1 2>/dev/null && echo "‚ö†Ô∏è  Pacotes comprometidos encontrados!" || echo "‚úÖ Nenhum pacote comprometido encontrado"

echo "üéâ Testes conclu√≠dos!"
EOF

    chmod +x "$test_script"
    echo -e "${GREEN}‚úÖ Script de teste criado: $test_script${NC}"
}

# 7. Criar arquivo de configura√ß√£o
create_config() {
    local config_file="$SCRIPT_DIR/npm-interceptor.conf"
    
    cat > "$config_file" << EOF
# Configura√ß√£o do NPM Smart Interceptor
# Edite este arquivo para personalizar o comportamento

# Habilitar/desabilitar an√°lise com IA
AI_ANALYSIS_ENABLED=true

# N√≠vel m√≠nimo de audit para bloquear instala√ß√£o
AUDIT_LEVEL=moderate

# Log detalhado (true/false) 
VERBOSE_LOGGING=true

# Timeout para an√°lise IA (segundos)
AI_TIMEOUT=30

# Auto-remover pacotes suspeitos (true/false)
AUTO_REMOVE_SUSPICIOUS=false

# Whitelist de pacotes (separados por v√≠rgula)
PACKAGE_WHITELIST=""

# Blacklist adicional de pacotes (separados por v√≠rgula) 
PACKAGE_BLACKLIST=""
EOF

    echo -e "${GREEN}‚úÖ Arquivo de configura√ß√£o criado: $config_file${NC}"
}

# Executar configura√ß√£o
main() {
    echo -e "${BLUE}üìã Configura√ß√£o autom√°tica iniciada${NC}"
    
    setup_alias
    setup_ai
    create_test_script
    create_config
    
    echo -e "\n${GREEN}üéâ Configura√ß√£o conclu√≠da com sucesso!${NC}"
    echo -e "\n${BLUE}üìã Pr√≥ximos passos:${NC}"
    echo -e "${YELLOW}1. Execute: source ~/.bashrc (ou ~/.zshrc)${NC}"
    echo -e "${YELLOW}2. Teste: ./test-interceptor.sh${NC}"
    echo -e "${YELLOW}3. Use: npm install <pacote> (ser√° interceptado automaticamente)${NC}"
    echo -e "${YELLOW}4. Para usar npm diretamente: npm-direct install <pacote>${NC}"
    echo -e "${YELLOW}5. Logs em: $SCRIPT_DIR/npm-security.log${NC}"
    
    echo -e "\n${BLUE}üõ°Ô∏è  O interceptor agora protege contra:${NC}"
    echo -e "   ‚Ä¢ Todos os pacotes comprometidos conhecidos (setembro 2025 + Shai-Hulud)"
    echo -e "   ‚Ä¢ An√°lise de padr√µes maliciosos p√≥s-instala√ß√£o"
    echo -e "   ‚Ä¢ An√°lise com IA para detectar novos ataques"
    echo -e "   ‚Ä¢ Verifica√ß√£o de npm audit autom√°tica"
    
    echo -e "\n${GREEN}‚ú® Sistema de prote√ß√£o ativo!${NC}"
}

# Executar se chamado diretamente
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi